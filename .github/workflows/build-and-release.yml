name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libc6-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          xcode-select --install || echo "Xcode command line tools already installed."

      - name: Set up CMake
        uses: lukka/get-cmake@latest

      - name: Set up Cygwin (Windows only)
        if: runner.os == 'Windows'
        run: |
          choco install cygwin --params "/InstallDir:C:\\cygwin" --yes
          echo "C:\\cygwin\\bin" >> $GITHUB_PATH
          C:\\cygwin\\bin\\bash -lc "apt-cyg install wget || echo 'wget already installed'"
          C:\\cygwin\\bin\\bash -lc "wget -O /usr/bin/cyg-get https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg"
          C:\\cygwin\\bin\\bash -lc "chmod +x /usr/bin/cyg-get"
          C:\\cygwin\\bin\\bash -lc "cyg-get make gcc-core gcc-g++"

      - name: Configure project (Windows using Cygwin)
        if: runner.os == 'Windows'
        run: |
          C:\\cygwin\\bin\\bash -lc "cmake -S . -B build -G 'Unix Makefiles' -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"

      - name: Build project (Windows using Cygwin)
        if: runner.os == 'Windows'
        run: |
          C:\\cygwin\\bin\\bash -lc "cmake --build build"

      - name: Configure project (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B build -G "Unix Makefiles"

      - name: Build project (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake --build build

      - name: Package binaries
        run: |
          cd build
          zip -r project-${{ matrix.os }}.zip .
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-binaries
          path: build/project-${{ matrix.os }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts
          asset_name: binaries-${{ runner.os }}.zip
          asset_content_type: application/zip

      - name: Upload source code
        run: zip -r source-code.zip .
      - name: Upload source code to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: source-code.zip
          asset_name: source-code.zip
          asset_content_type: application/zip
